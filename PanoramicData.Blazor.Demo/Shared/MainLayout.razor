@inherits LayoutComponentBase
@implements IDisposable

<div class="page">

	<PDBlockOverlay />

	<PDGlobalListener />

	@* Sidebar stays outside the PDChatContainer *@
	<div class="sidebar">
		<NavMenu />
	</div>

	@* PDChatContainer wraps only the main content area *@
	<div class="main">
		<div class="top-row px-4">
			@* Top navigation - clean without chat controls *@
			<div class="d-flex align-items-center justify-content-between w-100">
				<div class="d-flex align-items-center">
					<a class="me-3" href="https://www.panoramicdata.com/" title="Open PanoramicData.Blazor web-site" target="_blank">
						<img src="_content/PanoramicData.Blazor.Demo/svg/Panoramic Data.svg" height="32" />
					</a>
					<a class="me-3" href="https://www.nuget.org/packages/PanoramicData.Blazor/" title="Open PanoramicData.Blazor NuGet package" target="_blank">
						<img src="_content/PanoramicData.Blazor.Demo/svg/NuGet-Logo.svg" height="50" />
					</a>
					<a class="me-3" href="https://github.com/panoramicdata/PanoramicData.Blazor" title="Open PanoramicData.Blazor GitHub project" target="_blank">
						<img src="_content/PanoramicData.Blazor.Demo/png/GitHub-Mark-32px.png" height="30" />
					</a>
				</div>
			</div>
		</div>

		@* PDChatContainer wraps only the content area, not the entire layout *@
		<PDChatContainer @key="@($"chat-container-{_currentDockMode}")"
						 DockMode="_currentDockMode" 
						 ChatPanelSize="2" 
						 GutterSize="6">
			<ChatContent>
				@* Chat is always enabled - no conditional rendering *@
				<PDChat @key="@GetChatComponentKey()"
					ChatService="ChatService"
					Title="@ChatService.Title"
					DockMode="@_currentDockMode"
					DockModeChanged="@OnDockModeChanged"
					UserIconSelector="GetUserIcon"
					PriorityIconSelector="GetPriorityIcon"
					SoundSelector="GetSoundUrl"
					IsMaximizePermitted="@ChatService.IsMaximizePermitted"
					IsCanvasUsePermitted="@ChatService.IsCanvasUsePermitted"
					IsClearPermitted="@ChatService.IsClearPermitted"
					AutoRestoreOnNewMessage="@ChatService.AutoRestoreOnNewMessage"
					UseFullWidthMessages="@ChatService.UseFullWidthMessages"
					MessageMetadataDisplayMode="@ChatService.MessageMetadataDisplayMode"
					ShowMessageUserIcon="@ChatService.ShowMessageUserIcon"
					ShowMessageUserName="@ChatService.ShowMessageUserName"
					ShowMessageTimestamp="@ChatService.ShowMessageTimestamp"
					MessageTimestampFormat="@ChatService.MessageTimestampFormat"
					User="User" />
			</ChatContent>
			<ChildContent>
				@* Only the main content area goes here *@
				<div class="content px-4">
					<CascadingValue Value="_eventManager">
						@Body
					</CascadingValue>
				</div>
			</ChildContent>
		</PDChatContainer>
	</div>

</div>

@code {
	// Global chat state for the entire application - always start minimized
	private PDChatDockMode _currentDockMode = PDChatDockMode.Minimized;

	protected override void OnInitialized()
	{
		// Subscribe to configuration changes to trigger UI updates
		ChatService.OnConfigurationChanged += OnConfigurationChanged;
		ChatService.OnDockModeChanged += OnServiceDockModeChanged;
		
		// Always start minimized, but ensure service has a valid restore mode
		if (!IsNormalDockMode(ChatService.RestoreMode))
		{
			ChatService.RestoreMode = PDChatDockMode.BottomRight;
		}
		
		// Keep the current dock mode as minimized regardless of service preference
		_currentDockMode = PDChatDockMode.Minimized;
	}

	private void OnConfigurationChanged()
	{
		StateHasChanged();
	}

	private void OnServiceDockModeChanged(PDChatDockMode newMode)
	{
		// Only update if it's not a change to minimized (which we control here)
		if (newMode != PDChatDockMode.Minimized)
		{
			_currentDockMode = newMode;
			StateHasChanged();
		}
	}

	// Handle dock mode changes from the chat component
	private void OnDockModeChanged(PDChatDockMode newMode)
	{
		_currentDockMode = newMode;
		
		// Don't automatically update restore mode here - let the PDChat component manage it
		// The PDChat component will set RestoreMode when appropriate (e.g., during pin operations)
		
		StateHasChanged();
	}

	// Helper method to determine if current dock mode requires split layout
	private bool IsSplitMode() => _currentDockMode is PDChatDockMode.Left or PDChatDockMode.Right;

	// Helper method to check if a dock mode is a "normal" docked position (not minimized or fullscreen)
	private bool IsNormalDockMode(PDChatDockMode mode)
		=> mode != PDChatDockMode.Minimized && mode != PDChatDockMode.FullScreen;

	// Get a component key that only changes when layout fundamentally changes
	private string GetChatComponentKey()
	{
		// Only recreate component when switching between these fundamental layout types:
		// - Split modes (Left, Right, Top, Bottom)
		// - Non-split modes (corners, fullscreen, minimized)
		// This preserves message history during dock mode changes within the same layout type
		return IsSplitMode() ? "split-layout" : "overlay-layout";
	}
	
	public void Dispose()
	{
		ChatService.OnConfigurationChanged -= OnConfigurationChanged;
		ChatService.OnDockModeChanged -= OnServiceDockModeChanged;
	}
}