@typeparam TItem

@{
    var fieldType = Field.GetFieldType();
}
<div class="editor">

    @if(Field.GetFieldIsNullable() && Field.DisplayOptions?.AllowNulls == true)
    {
        <input @attributes ="GetNullEditorAttributes()"
               @oninput="OnHasNullValueChanged"
               type="checkbox"  />
    }


    @if (Field.EditTemplate != null)
    {
        @Field.EditTemplate(Form?.Item)
    }
    else if (Field.IsPassword || Field.IsSensitive(Form?.Item, Form))
    {
        <input @onblur="() => Field.SuppressErrors = false"
               @onchange="async (x) => await UpdateValueViaCastAsync(x, Field).ConfigureAwait(true)"
               autocomplete="@Field.AutoComplete"
               class="form-control @GetEditorClass(Field)"
               disabled="@IsReadOnly(Field)"
               maxlength="@(Field.MaxLength ?? -1)"
               type="password"
               value="@Form?.GetFieldStringValue(Field)" />
    }
    else if (fieldType?.FullName == "System.DateTime")
    {
        <input @onblur="() => Field.SuppressErrors = false"
               @onchange="(x) => UpdateDateTimeValue(x, Field)"
               class="form-control @GetEditorClass(Field)"
               disabled="@IsReadOnly(Field)"
               type="date"
               value="@(Form?.GetFieldStringValue(Field))">
    }
    else if (fieldType?.FullName == "System.DateTimeOffset")
    {
        <input @onblur="() => Field.SuppressErrors = false"
               @onchange="(x) => UpdateDateTimeOffsetValue(x, Field)"
               disabled="@IsReadOnly(Field)"
               class="form-control"
               type="date"
               value="@(Form?.GetFieldStringValue(Field))">
    }
    else if (Field.Options != null)
    {
        <select @onblur="() => Field.SuppressErrors = false"
                @oninput="(x) => OnSelectInputChanged(x, Field)"
                class="form-select @GetEditorClass(Field)"
                disabled="@IsReadOnly(Field)">
            @{
                var currentValue = Form!.GetFieldValue(Field, true);
                foreach (var option in Field.Options(Field, Form?.Item))
                {
                    if ((option.Value == null && currentValue == null) || (option.Value!.Equals(currentValue)))
                    {
                        <option value="@option.Value" disabled="@option.IsDisabled" selected>@option.Text</option>
                    }
                    else
                    {
                        <option value="@option.Value" disabled="@option.IsDisabled">@option.Text</option>
                    }
                }
            }
        </select>
    }
    else if (Field.IsTextArea)
    {
        <PDTextArea IsEnabled="@(!IsReadOnly(Field))"
                Blur="() => Field.SuppressErrors = false"
                CssClass="@($"form-control {GetEditorClass(Field)}")"
                Rows="@Field.TextAreaRows"
                MaxLength="@(Field.MaxLength ?? -1)"
                Value="@(Form?.GetFieldStringValue(Field))"
                ValueChanged="(x) => Form?.SetFieldValueAsync(Field, x) ?? Task.CompletedTask"
                DebounceWait="DebounceWait" />
    }
    else if (Field.IsImage)
    {
	    <img src="@(Form?.GetFieldStringValue(Field))" />
    }
    else if (fieldType?.FullName == "System.Boolean")
    {
        if(Field.DisplayOptions is FieldBooleanOptions boolOpt)
        {
            if(boolOpt.Style == FieldBooleanOptions.DisplayComponent.ToggleSwitch)
            {
                <PDToggleSwitch CssClass="@boolOpt.CssClass"
                    IsEnabled="@(!IsReadOnly(Field))"
                    Rounded="boolOpt.Rounded"
                    Label="@Field.Label"
                    LabelBefore="@boolOpt.LabelBefore"
                    OffText="@boolOpt.OffText"
                    OnText="@boolOpt.OnText"
                    Value="@(Form?.GetFieldValue<bool>(Field) ?? false)"
                    ValueChanged="(x) => Form?.SetFieldValueAsync(Field, (bool)x) ?? Task.CompletedTask" />
            }
            else
            {
                <PDFormCheckBox CssClass="@boolOpt.CssClass"
                    Disabled="@IsReadOnly(Field)"
                    Label="@Field.Label"
                    LabelBefore="@boolOpt.LabelBefore"
                    Value="@(Form?.GetFieldValue<bool>(Field) ?? false)"
                    ValueChanged="(x) => Form?.SetFieldValueAsync(Field, (bool)x) ?? Task.CompletedTask" />
            }
        }
        else
        {
            <PDFormCheckBox CssClass="@(Field.DisplayOptions?.CssClass)"
                        Disabled="@IsReadOnly(Field)"
                        Label="@Field.Label"
                        Value="@(Form?.GetFieldValue<bool>(Field) ?? false)"
                        ValueChanged="(x) => Form?.SetFieldValueAsync(Field, (bool)x) ?? Task.CompletedTask" />
        }
    }
    else if (fieldType?.IsEnum == true)
    {
        <select @onblur="() => Field.SuppressErrors = false"
                @oninput="(x) => Form?.SetFieldValueAsync(Field, Enum.Parse(fieldType, x.Value?.ToString() ?? string.Empty)) ?? Task.CompletedTask"
                class="form-select @GetEditorClass(Field)"
                disabled="@IsReadOnly(Field)">
            @foreach (var option in GetEnumValues(Field))
            {
                <option value="@option.Value"
                        selected="@option.IsSelected">
                    @option.Text
                </option>
            }
        </select>
    }
    else if (fieldType?.FullName == "System.String")
    {
        <PDTextBox CssClass="@GetEditorClass(Field)"
               AutoComplete="@Field.AutoComplete"
               Blur="() => Field.SuppressErrors = false"
               ShowClearButton="false"
               Placeholder="@Field.Label"
               IsEnabled="!IsReadOnly(Field)"
               Value="@(Form?.GetFieldStringValue(Field))"
               ValueChanged="(x) => Form?.SetFieldValueAsync(Field, x) ?? Task.CompletedTask"
               DebounceWait="DebounceWait" />
    }
    else if (fieldType?.FullName == "System.Guid")
    {
        <PDTextBox CssClass="@GetEditorClass(Field)"
               AutoComplete="@Field.AutoComplete"
               Blur="() => Field.SuppressErrors = false"
               ShowClearButton="false"
               IsEnabled="!IsReadOnly(Field)"
               Value="@(Form?.GetFieldStringValue(Field))"
               ValueChanged="(x) => Form?.SetFieldValueAsync(Field, x) ?? Task.CompletedTask"
               DebounceWait="DebounceWait" />
    }
    else
    {
        <input @attributes="PDFormFieldEditor<TItem>.GetNumericAttributes(Field)"
               @onblur="() => Field.SuppressErrors = false"
               @onchange="async (x) => await UpdateValueViaCastAsync(x, Field).ConfigureAwait(true)"
               type="number"
               disabled="@IsReadOnly(Field)"
               class="form-control @GetEditorClass(Field)"
               value="@(Form?.GetFieldValue<double>(Field))" />
    }

</div>