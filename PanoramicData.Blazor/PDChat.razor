@using static PanoramicData.Blazor.PDResizePane
@inherits ComponentBase

<div class="pdchat-container @( _isOpen ? "open" : "" )">
	@if(ChatService.IsLive)
	{
		<button class="pdchat-toggle-collapsed" @onclick="ToggleChat">
			<span>@(_isOpen ? "×" : "💬")</span>
		</button>
	}
	else
	{
		<button class="pdchat-toggle-collapsed pdchat-not-live" @onclick="ToggleChat" title="Offline">
			<span>💬</span>
		</button>
	}

	@if (_isOpen)
	{
		<div class="pdchat-window@(_isMaximized ? " maximized" : string.Empty)">
			<div class="pdchat-header">
				<span class="pdchat-title">@Title@(ChatService.IsLive ? string.Empty : " (Offline)")</span>
				<button class="pdchat-header-btn" @onclick="ToggleMute" title="@(_isMuted ? "Unmute" : "Mute")">
					<span>@(_isMuted ? "🔇" : "🔊")</span>
				</button>
				@if (IsMaximizePermitted)
				{
					<button class="pdchat-header-btn" @onclick="ToggleMaximize" title="@(_isMaximized ? "Restore" : "Maximize")">
						<span>@(_isMaximized ? "🗗" : "🗖")</span>
					</button>
				}
				<button class="pdchat-close" @onclick="ToggleChat">✖</button>
			</div>

			@if (_isMaximized && IsCanvasUsePermitted)
			{
				<PDSplitter Direction="SplitDirection.Horizontal" GutterSize="6" CssClass="pdchat-splitter">
					<PDSplitPanel Size="2" MinSize="200">
						<PDMessages @ref="_pdMessages"
							Messages="_messages"
							CurrentInput="@_currentInput"
							CurrentInputChanged="@((string v) => _currentInput = v)"
							IsLive="@ChatService.IsLive"
							CanSend="@CanSend"
							OnSendClicked="SendCurrentMessageAsync"
							UserIconSelector="UserIconSelector" />
					</PDSplitPanel>
					<PDSplitPanel Size="3" MinSize="200">
						<div class="pdchat-canvas-flex">
							<PDTabSet @ref="_tabSetRef" 
								IsTabClosingEnabled="true"
								IsTabAdditionEnabled="true"
								IsTabRenamingEnabled="true"
								OnTabAdded="OnTabAdded">
							</PDTabSet>
						</div>
					</PDSplitPanel>
				</PDSplitter>
			}
			else
			{
				<PDMessages @ref="_pdMessages"
					Messages="_messages"
					CurrentInput="@_currentInput"
					CurrentInputChanged="@((string v) => _currentInput = v)"
					IsLive="@ChatService.IsLive"
					CanSend="@CanSend"
					OnSendClicked="SendCurrentMessageAsync"
					UserIconSelector="UserIconSelector" />
			}
		</div>
	}
</div>


