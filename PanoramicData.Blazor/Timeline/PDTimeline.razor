@using PanoramicData.Blazor.Extensions
<div id="@Id"
	 class="pd-timeline"
	 @onmousewheel="OnMouseWheel">

     @{
        var points = GetViewPortDataPoints();
        var snappedWidth = (_canvasWidth - (_canvasWidth % Options.Bar.Width));
    }

	<svg @ref="_svgCanvasElement"
		 class="tl-plot-area"
		 preserveAspectRatio="none">
		@{
			if (points.Length > 0)
			{
				var maxYValue = points.Max(x => x?.SeriesValues.Sum() ?? 0);
				for (var i = 0; i < points.Length; i++)
				{
					<PDStackedBar DataPoint="points[i]"
								  MaxValue="maxYValue"
								  Options="Options"
								  X="@(i * Options.Bar.Width)" />
				}
			}
		}
	</svg>

	<svg class="tl-x-axis"
		preserveAspectRatio="none">
        @for(var x=0; x < _canvasWidth; x += Options.Bar.Width)
        {
           <line x1="@x" y1="0" x2="@x" y2="5" stroke="silver" />
        }
        @for (var i = 0; i < points.Length; i++)
        {
            var dt = MinDateTime.AddPeriods(Scale, _columnOffset + i);
            var textInfo = GetTextInfo(dt);
            <line x1="@(i * Options.Bar.Width)" x2="@(i * Options.Bar.Width)" y2="15" stroke="black" />
            <text>
                <text x="@((i * Options.Bar.Width) + @textInfo.OffsetX)" y="@textInfo.OffsetY">@textInfo.Text</text>
            </text>
            i += textInfo.Skip;
        }
    </svg>

	<svg class="tl-pan"
		 @onmousedown="OnPanMouseDown"
		 @onmousemove="OnPanMouseMove"
		 @onmouseup="OnPanMouseUp"
		 preserveAspectRatio="none">
		<rect x="@_panHandleX" y="0" width="@_panHandleWidth" height="20" fill="@Options.Colours.HandleBackground" />
	</svg>

</div>

<div>
	<h4>Data</h4>
	<p>Width = @_canvasWidth</p>
    <p>Snapped width = @snappedWidth</p>
	<p>Bar Width = @Options.Bar.Width</p>
	<p>Columns = @_totalColumns</p>
	<p>Column Offset = @_columnOffset</p>
	<p>ViewPort Width (Cols) = @_viewportColumns</p>
</div>