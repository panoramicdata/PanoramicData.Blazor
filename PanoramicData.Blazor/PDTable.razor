@typeparam TItem

<div id="@Id"
	 class="pdtable @CssClass"
	 tabindex="0"
	 @onmousedown="OnDivMouseDown"
	 @oncontextmenu:stopPropagation
	 @oncontextmenu:preventDefault
	 @onkeydown="OnKeyDownAsync">

	@*<input id="focus-receiver" />*@
	<table class="table @TableClass"
		   @onmousedown="OnTableMouseDown">
		@if (PageCriteria != null && ShowPager)
		{
			<tr>
				<td colspan="@ActualColumnsToDisplay.Count()">
					<div class="">
						<PDPager PageCriteria="PageCriteria"
								 PageSizeChoices="PageSizeChoices"
								 NoItemsText="" />
					</div>
				</td>
			</tr>
		}
		<tr>
			@foreach (var column in ActualColumnsToDisplay)
			{
				<th scope="col" class="@column.ThClass" style="white-space: nowrap;">
					@if (column.Sortable)
					{
						<div title="@column.HelpText" @onclick="@(async () => await SortByAsync(column))">
							<span class="text-nowrap pd-pointer">@column.Title</span>
							@if (column.Sortable)
							{
								<span>@((MarkupString)column.SortIcon)</span>
							}
						</div>
					}
					else
					{
						<div title="@column.HelpText">@column.Title</div>
					}
				</th>
			}
		</tr>
		<tbody>
			@if (ItemsToDisplay.Any())
			{
				foreach (var item in ItemsToDisplay)
				{
					<tr class="pdtablerow @GetDynamicRowClasses(item)"
						@attributes="RowAttributes"
						@oncontextmenu:preventDefault
						@onmousedown="@((args) => OnRowMouseDownAsync(args, item))"
						@onclick="@((args) => OnRowClick(args, item))"
						@ondblclick="@((args) => OnRowDoubleClick(args, item))"
						@ondragstart="OnDragStart"
						@ondragend="OnDragEnd"
						@ondrop="@((args) => OnDragDropAsync(item, args))">
						@foreach (var column in ActualColumnsToDisplay)
						{
							var row = ItemsToDisplay.IndexOf(item);
							<td class="@column.TdClass">
								@if (IsColumnInEditMode(column, item) && column.Field != null)
								{
									if (column.EditTemplate == null)
									{
										<input id="@($"{IdEditPrefix}-{row}-{column.Id}")"
											   type="@(column.IsPassword ? "password" : "text")"
											   value="@($"{column.GetValue(item)}")"
											   class="pdtable_edit"
											   @oninput="(a) => OnEditInput(column, a.Value == null ? string.Empty : a.Value.ToString())"
											   @onblur="async () => await OnEditBlurAsync().ConfigureAwait(true)"
											   @onmousedown:stopPropagation
											   @onclick:stopPropagation
											   @oncontextmenu:stopPropagation />
									}
									else
									{
										@column.EditTemplate(item);
									}
								}
								else
								{
									if (column.Template == null)
									{
										@column.GetRenderValue(item);
									}
									else
									{
										@column.Template(item);
									}
								}
							</td>
						}
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="@ActualColumnsToDisplay.Count()" style="text-align: center;">
						@NoDataMessage
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<CascadingValue Value="(PDTable<TItem>)this" Name="Table">
	@ChildContent
</CascadingValue>