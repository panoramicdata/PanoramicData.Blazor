@typeparam TItem

<div id="@Id"
     class="pdtable @(IsEnabled ? "" : "disabled") @CssClass"
     tabindex="0"
     @attributes="DivAttributes"
     @onmousedown="OnDivMouseDown"
     @oncontextmenu:stopPropagation
     @oncontextmenu:preventDefault
     @ondrop="OnDragDropAsync"
     @onkeydown="OnKeyDownAsync"
     @onkeydown:stopPropagation
     @onkeydown:preventDefault>

    @*<input id="focus-receiver" />*@
    <table class="table @TableClass"
           @onmousedown="OnTableMouseDown">
        <thead>
            @if (PageCriteria != null && ShowPager && PagerPosition != PagerPositions.Bottom)
            {
                <tr>
                    <td colspan="@(ActualColumnsToDisplay.Count() + (ShowCheckboxes && SelectionMode == TableSelectionMode.Multiple ? 1 : 0))">
                        <div class="">
                            <PDPager IsEnabled="IsEnabled"
                                     NoItemsText=""
                                     PageCriteria="PageCriteria"
                                     PageSizeChoices="PageSizeChoices"
                                     Size="Size" />
                        </div>
                    </td>
                </tr>
            }
            <tr>
                @if(ShowCheckboxes && SelectionMode == TableSelectionMode.Multiple && ItemsToDisplay.Any())
                {
                    <th>
                        <input checked="@(ItemsToDisplay.All(x => IsSelected(x)))"
                               class="form-check-input"
                               disabled="@(!IsEnabled)"
                               type="checkbox"
                               @onclick:stopPropagation
                               @oninput="@((a) => OnToggleAllSelection(Convert.ToBoolean(a.Value)))"
                               @onmousedown:stopPropagation
                               @onmouseup:stopPropagation />
                    </th>
                }
                @foreach (var column in ActualColumnsToDisplay)
                {
                    <th scope="col" class="@column.ThClass" style="white-space: nowrap;">
                        @if(column.HeaderTemplate is null)
                        {
                            if (column.Sortable)
                            {
                                <div title="@column.HelpText" @onclick="@(async () => await SortByAsync(column))">
                                    <span class="text-nowrap pd-pointer">@column.Title</span>
                                    @if (column.Sortable)
                                    {
                                        <span>@((MarkupString)column.SortIcon)</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <div title="@column.HelpText">@column.Title</div>
                            }
                        }
                        else
                        {
                            @column.HeaderTemplate;
                        }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (ItemsToDisplay.Any())
            {
                foreach (var item in ItemsToDisplay)
                {
                    <tr class="pdtablerow @GetDynamicRowClasses(item)"
                        id="@(KeyField is null ? null : KeyField(item)?.ToString())"
                        @attributes="RowAttributes"
                        @oncontextmenu:preventDefault
                        @onmousedown="@((args) => OnRowMouseDownAsync(args, item))"
                        @onclick="@((args) => OnRowClick(args, item))"
                        @ondblclick="@((args) => OnRowDoubleClick(args, item))"
                        @ondragstart="OnDragStart"
                        @ondragend="OnDragEnd"
                        @ondrop:stopPropagation
                        @ondrop="@((args) => OnRowDragDropAsync(args, item))">

                        @if(ShowCheckboxes && SelectionMode == TableSelectionMode.Multiple)
                        {
                            <td>
                                <input checked="@IsSelected(item)"
                                       class="form-check-input"
                                       disabled="@(!IsEnabled || !RowIsEnabled(item))"
                                       type="checkbox"
                                       @onclick:stopPropagation
                                       @oninput="@((a) => OnToggleSelection(item, Convert.ToBoolean(a.Value)))"
                                       @onmousedown:stopPropagation
                                       @onmouseup:stopPropagation />
                            </td>
                        }

                        @foreach (var column in ActualColumnsToDisplay)
                        {
                            var row = ItemsToDisplay.IndexOf(item);
                            <td class="@column.TdClass">
                                @if (IsColumnInEditMode(column, item) && column.Field != null)
                                {
                                    if (column.EditTemplate == null)
                                    {
                                        <input id="@($"{IdEditPrefix}-{row}-{column.Id}")"
                                               type="@(column.IsPassword || column.IsSensitive(item, null) ? "password" : "text")"
                                               value="@($"{column.GetValue(item)}")"
                                               class="pdtable_edit"
                                               @oninput="(a) => OnEditInput(column, a.Value == null ? string.Empty : a.Value.ToString())"
                                               @onblur="async () => await OnEditBlurAsync().ConfigureAwait(true)"
                                               @onmousedown:stopPropagation
                                               @onclick:stopPropagation
                                               @oncontextmenu:stopPropagation />
                                    }
                                    else
                                    {
                                        @column.EditTemplate(item);
                                    }
                                }
                                else
                                {
                                    if (column.Template == null)
                                    {
                                        @column.GetRenderValue(item);
                                    }
                                    else
                                    {
                                        @column.Template(item);
                                    }
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@ActualColumnsToDisplay.Count()" style="text-align: center;">
                        @NoDataMessage
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            @if (PageCriteria != null && ShowPager && PagerPosition != PagerPositions.Top)
            {
                <tr>
                    <td colspan="@(ActualColumnsToDisplay.Count() + (ShowCheckboxes && SelectionMode == TableSelectionMode.Multiple ? 1 : 0))">
                        <div class="">
                            <PDPager IsEnabled="IsEnabled"
                                     NoItemsText=""
                                     PageCriteria="PageCriteria"
                                     PageSizeChoices="PageSizeChoices"
                                     Size="Size" />
                        </div>
                    </td>
                </tr>
            }
        </tfoot>
    </table>
</div>

<CascadingValue Value="(PDTable<TItem>)this" Name="Table">
    @ChildContent
</CascadingValue>